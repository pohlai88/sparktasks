{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\r\n * ESLint Plugin for MAPS Token Guard - Standalone Distribution\r\n *\r\n * Extracted from src/components/primitives/token-guard.tsx for:\r\n * - Industry-standard plugin distribution\r\n * - Reusability across projects\r\n * - Better IDE/ESLint integration\r\n * - NPM ecosystem compatibility\r\n */\r\n\r\n// ===== TYPE DEFINITIONS =====\r\n\r\ninterface ESLintNode {\r\n  type: string;\r\n  name?: { name: string };\r\n  key?: { name: string };\r\n  value?: {\r\n    type: string;\r\n    value?: string;\r\n    expression?: {\r\n      type: string;\r\n      value?: string;\r\n      callee?: {\r\n        type: string;\r\n        name?: string;\r\n        property?: { name: string };\r\n      };\r\n      quasis?: Array<{ value: { cooked: string } }>;\r\n      properties?: Array<{\r\n        value: { type: string };\r\n        key?: { name: string };\r\n      }>;\r\n    };\r\n  };\r\n  source?: { value: string };\r\n}\r\n\r\ninterface ESLintContext {\r\n  report: (args: { node: ESLintNode; message: string }) => void;\r\n  getFilename: () => string;\r\n}\r\n\r\ninterface ESLintRule {\r\n  meta: {\r\n    type: 'problem' | 'suggestion' | 'layout';\r\n    docs: {\r\n      description: string;\r\n      category?: string;\r\n      recommended?: boolean;\r\n    };\r\n    schema?: unknown[];\r\n    fixable?: 'code' | 'whitespace';\r\n  };\r\n  create: (ctx: ESLintContext) => Record<string, (node: ESLintNode) => void>;\r\n}\r\n\r\n// ===== UTILITY FUNCTIONS =====\r\n\r\nfunction isCnOrCva(node: ESLintNode): boolean {\r\n  return node &&\r\n    node.type === 'CallExpression' &&\r\n    ((node.value?.expression?.callee?.type === 'Identifier' &&\r\n      (node.value.expression.callee.name === 'cn' || node.value.expression.callee.name === 'cva')) ||\r\n     (node.value?.expression?.callee?.type === 'MemberExpression' &&\r\n      node.value.expression.callee.property?.name === 'cn'));\r\n}\r\n\r\nfunction extractClassStrings(node: ESLintNode): string[] {\r\n  // Literal: className=\"...\"\r\n  if (node?.value?.type === 'Literal' && typeof node.value.value === 'string') {\r\n    return [node.value.value];\r\n  }\r\n\r\n  // TemplateLiteral: className={`... ${x}`}\r\n  if (node?.value?.type === 'JSXExpressionContainer' &&\r\n      node.value.expression?.type === 'TemplateLiteral') {\r\n    return node.value.expression.quasis?.map((q) => q.value.cooked).filter(Boolean) || [];\r\n  }\r\n\r\n  // Direct string in JSXExpressionContainer: className={\"foo bar\"}\r\n  if (node?.value?.type === 'JSXExpressionContainer' &&\r\n      node.value.expression?.type === 'Literal' &&\r\n      typeof node.value.expression.value === 'string') {\r\n    return [node.value.expression.value];\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\n// ===== REGEX PATTERNS =====\r\n\r\nconst RAW_TW = /\\b(bg|text|border|shadow|ring|p|m|space|gap|w|h|rounded|z|inset|top|left|right|bottom)-[A-Za-z0-9:/.-]+\\b/;\r\nconst ARBITRARY_TW = /\\[[^\\]]+\\]/; // e.g., p-[13px], bg-[color:var(--foo)]\r\nconst IMPORTANT_TW = /(^|\\s)![A-Za-z0-9-:/[\\]]+/; // e.g., !mt-2\r\nconst LIGHT_ONLY = /\\b(bg-white|text-black|border-gray-200)\\b/;\r\nconst SR_ONLY_USAGE = /\\bsr-only\\b/; // Direct sr-only class usage\r\n\r\n// ===== ESLINT RULES =====\r\n\r\nexport const rules: Record<string, ESLintRule> = {\r\n  \"no-raw-tailwind-in-components\": {\r\n    meta: {\r\n      type: \"problem\",\r\n      docs: {\r\n        description: \"Disallow raw Tailwind in components; use tokens/CVA\",\r\n        category: \"Best Practices\",\r\n        recommended: true\r\n      }\r\n    },\r\n    create(ctx: ESLintContext) {\r\n      return {\r\n        JSXAttribute(node: ESLintNode) {\r\n          if (node.name?.name !== \"className\") return;\r\n\r\n          // Allow cn()/cva() wrappers ‚Äì they resolve tokens/variants elsewhere\r\n          if (node.value?.type === \"JSXExpressionContainer\" && isCnOrCva(node)) return;\r\n\r\n          const chunks = extractClassStrings(node);\r\n          for (const chunk of chunks) {\r\n            if (RAW_TW.test(chunk)) {\r\n              if (ARBITRARY_TW.test(chunk) || IMPORTANT_TW.test(chunk)) {\r\n                ctx.report({\r\n                  node,\r\n                  message: \"‚ùå Arbitrary/important Tailwind detected. Use ENHANCED_DESIGN_TOKENS instead.\"\r\n                });\r\n              } else {\r\n                ctx.report({\r\n                  node,\r\n                  message: \"‚ö†Ô∏è Raw Tailwind detected. Use tokenized CVA variants instead.\"\r\n                });\r\n              }\r\n            }\r\n          }\r\n        },\r\n      };\r\n    },\r\n  },\r\n\r\n  \"no-inline-style-hardcoded\": {\r\n    meta: {\r\n      type: \"problem\",\r\n      docs: {\r\n        description: \"Disallow style={{ ... }} with hardcoded values in components\",\r\n        category: \"Best Practices\",\r\n        recommended: true\r\n      }\r\n    },\r\n    create(ctx: ESLintContext) {\r\n      return {\r\n        JSXAttribute(node: ESLintNode) {\r\n          if (node.name?.name !== \"style\") return;\r\n\r\n          if (node.value?.type === \"JSXExpressionContainer\" &&\r\n              node.value.expression?.type === \"ObjectExpression\") {\r\n            // Any Literal values in style are considered drift (colors/px/etc)\r\n            for (const prop of node.value.expression.properties || []) {\r\n              if (prop.value?.type === \"Literal\") {\r\n                ctx.report({\r\n                  node,\r\n                  message: \"‚ùå Inline style literal detected. Use className with ENHANCED_DESIGN_TOKENS.\"\r\n                });\r\n              }\r\n            }\r\n          }\r\n        },\r\n      };\r\n    },\r\n  },\r\n\r\n  \"require-dark-first\": {\r\n    meta: {\r\n      type: \"suggestion\",\r\n      docs: {\r\n        description: \"Disallow light-only classes; enforce dark-first tokens\",\r\n        category: \"Stylistic Issues\",\r\n        recommended: false\r\n      }\r\n    },\r\n    create(ctx: ESLintContext) {\r\n      return {\r\n        JSXAttribute(node: ESLintNode) {\r\n          if (node.name?.name !== \"className\") return;\r\n\r\n          const chunks = extractClassStrings(node);\r\n          for (const chunk of chunks) {\r\n            if (LIGHT_ONLY.test(chunk)) {\r\n              ctx.report({\r\n                node,\r\n                message: \"‚ö†Ô∏è Light-only utility found. Use dark-first tokens (ENHANCED_DESIGN_TOKENS).\"\r\n              });\r\n            }\r\n          }\r\n        },\r\n      };\r\n    },\r\n  },\r\n\r\n  \"enforce-visually-hidden\": {\r\n    meta: {\r\n      type: \"suggestion\",\r\n      docs: {\r\n        description: \"Require <VisuallyHidden> component instead of sr-only class\",\r\n        category: \"Accessibility\",\r\n        recommended: true\r\n      }\r\n    },\r\n    create(ctx: ESLintContext) {\r\n      return {\r\n        JSXAttribute(node: ESLintNode) {\r\n          if (node.name?.name !== \"className\") return;\r\n\r\n          const chunks = extractClassStrings(node);\r\n          for (const chunk of chunks) {\r\n            if (SR_ONLY_USAGE.test(chunk)) {\r\n              ctx.report({\r\n                node,\r\n                message: \"üö´ Use <VisuallyHidden> from @/components/primitives instead of sr-only class.\"\r\n              });\r\n            }\r\n          }\r\n        },\r\n      };\r\n    },\r\n  },\r\n\r\n  \"enforce-token-imports\": {\r\n    meta: {\r\n      type: \"suggestion\",\r\n      docs: {\r\n        description: \"Components must import SSOT tokens\",\r\n        category: \"Best Practices\",\r\n        recommended: false\r\n      }\r\n    },\r\n    create(ctx: ESLintContext) {\r\n      let hasTokensImport = false;\r\n      return {\r\n        ImportDeclaration(node: ESLintNode) {\r\n          const src = node.source?.value || \"\";\r\n          if (typeof src === \"string\" && (\r\n            src.includes(\"/tokens\") ||\r\n            src.includes(\"/enhanced-tokens\") ||\r\n            src.includes(\"ENHANCED_DESIGN_TOKENS\")\r\n          )) {\r\n            hasTokensImport = true;\r\n          }\r\n        },\r\n        \"Program:exit\"(node: ESLintNode) {\r\n          const filename = ctx.getFilename();\r\n          if (filename.includes(\"/components/\") && !hasTokensImport) {\r\n            ctx.report({\r\n              node,\r\n              message: \"‚ö†Ô∏è Missing tokens import in component file. Import ENHANCED_DESIGN_TOKENS.\"\r\n            });\r\n          }\r\n        },\r\n      };\r\n    },\r\n  },\r\n\r\n  \"no-hardcoded-z-index\": {\r\n    meta: {\r\n      type: \"problem\",\r\n      docs: {\r\n        description: \"Disallow hardcoded z-index values; use z-index orchestrator\",\r\n        category: \"Best Practices\",\r\n        recommended: true\r\n      }\r\n    },\r\n    create(ctx: ESLintContext) {\r\n      return {\r\n        JSXAttribute(node: ESLintNode) {\r\n          if (node.name?.name !== \"className\") return;\r\n\r\n          const chunks = extractClassStrings(node);\r\n          for (const chunk of chunks) {\r\n            if (/z-\\[[0-9]+\\]/.test(chunk)) {\r\n              ctx.report({\r\n                node,\r\n                message: \"‚ùå Hardcoded z-index detected. Use useZIndex() hook for layer management.\"\r\n              });\r\n            }\r\n          }\r\n        },\r\n\r\n        Property(node: ESLintNode) {\r\n          if (node.key?.name === \"zIndex\" && node.value?.type === \"Literal\") {\r\n            ctx.report({\r\n              node,\r\n              message: \"‚ùå Hardcoded z-index in style object. Use useZIndex() hook instead.\"\r\n            });\r\n          }\r\n        },\r\n      };\r\n    },\r\n  },\r\n};\r\n\r\n// ===== CONFIGURATIONS =====\r\n\r\nexport const configs = {\r\n  recommended: {\r\n    plugins: [\"maps-token-guard\"],\r\n    rules: {\r\n      \"maps-token-guard/no-raw-tailwind-in-components\": \"error\",\r\n      \"maps-token-guard/no-inline-style-hardcoded\": \"error\",\r\n      \"maps-token-guard/enforce-visually-hidden\": \"warn\",\r\n      \"maps-token-guard/no-hardcoded-z-index\": \"error\",\r\n      \"maps-token-guard/require-dark-first\": \"warn\",\r\n      \"maps-token-guard/enforce-token-imports\": \"warn\",\r\n    },\r\n  },\r\n\r\n  strict: {\r\n    plugins: [\"maps-token-guard\"],\r\n    rules: {\r\n      \"maps-token-guard/no-raw-tailwind-in-components\": \"error\",\r\n      \"maps-token-guard/no-inline-style-hardcoded\": \"error\",\r\n      \"maps-token-guard/enforce-visually-hidden\": \"error\",\r\n      \"maps-token-guard/no-hardcoded-z-index\": \"error\",\r\n      \"maps-token-guard/require-dark-first\": \"error\",\r\n      \"maps-token-guard/enforce-token-imports\": \"error\",\r\n    },\r\n  },\r\n\r\n  \"tokens-only\": {\r\n    plugins: [\"maps-token-guard\"],\r\n    rules: {\r\n      \"maps-token-guard/no-raw-tailwind-in-components\": \"error\",\r\n      \"maps-token-guard/no-inline-style-hardcoded\": \"error\",\r\n      \"maps-token-guard/enforce-token-imports\": \"error\",\r\n    },\r\n  },\r\n};\r\n\r\n// ===== PLUGIN EXPORT =====\r\n\r\nconst plugin = {\r\n  rules,\r\n  configs,\r\n};\r\n\r\nexport default plugin;\r\n\r\n// CommonJS compatibility for older ESLint versions\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = plugin;\r\n  module.exports.default = plugin;\r\n}\r\n"],"mappings":"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","names":[]}