name: 'SSOT Sync Reminder'

on:
  push:
    paths:
      - 'docs/SSOT.md'
  workflow_dispatch: {}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Extract Section 1 from SSOT
        id: extract
        run: |
          node -e "const fs=require('fs');const t=fs.readFileSync('docs/SSOT.md','utf8');const m=t.match(/## 1\) Short System Prompt([\s\S]*?)(?:\n## |$)/);if(!m){console.error('No Section 1');process.exit(0);}console.log(Buffer.from(m[1].trim()).toString('base64'))" > section1.b64
      - name: Compare with repo SHORT_PROMPT.md and create PR if needed
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const sectionB64 = fs.readFileSync('section1.b64','utf8').trim();
            const section = Buffer.from(sectionB64, 'base64').toString('utf8');
            // fetch current SHORT_PROMPT.md via GitHub API
            let current = '';
            let currentSha = undefined;
            try {
              const resp = await github.repos.getContent({ owner, repo, path: 'SHORT_PROMPT.md', ref: context.sha });
              current = Buffer.from(resp.data.content, resp.data.encoding).toString('utf8');
              currentSha = resp.data.sha;
            } catch (e) {
              // file missing -> we'll create it
              current = '';
            }
            const normalize = s => s.replace(/\r\n/g,'\n').replace(/\s+/g,' ').trim();
            if (normalize(current) === normalize(section)) {
              console.log('SHORT_PROMPT.md matches Section 1 â€” no PR needed');
              return;
            }
            // create branch from default branch
            const base = context.ref.replace('refs/heads/','') || 'main';
            const branch = `ssot-sync/short-prompt-update-${Date.now()}`;
            const headSha = (await github.repos.getBranch({ owner, repo, branch: base })).data.commit.sha;
            await github.git.createRef({ owner, repo, ref: `refs/heads/${branch}`, sha: headSha });
            // create or update file on that branch
            const contentEnc = Buffer.from(section, 'utf8').toString('base64');
            await github.repos.createOrUpdateFileContents({ owner, repo, path: 'SHORT_PROMPT.md', message: 'chore: sync SHORT_PROMPT.md from docs/SSOT.md', content: contentEnc, branch, sha: currentSha });
            // build a small diff excerpt for PR body
            const oldLines = (current || '').split(/\r?\n/);
            const newLines = section.split(/\r?\n/);
            const maxLines = Math.max(oldLines.length, newLines.length);
            const diff = [];
            for (let i = 0; i < maxLines && diff.length < 200; i++) {
              const o = oldLines[i] || '';
              const n = newLines[i] || '';
              if (o === n) {
                diff.push('  ' + o);
              } else {
                if (o) diff.push('- ' + o);
                if (n) diff.push('+ ' + n);
              }
            }
            const diffText = diff.join('\n');
            const excerpt = 'Proposed changes (excerpt):\n\n' + '```\n' + diffText + '\n```';
            const prBody = 'Automated suggestion: SHORT_PROMPT.md appears out of date with docs/SSOT.md. Please review.\n\n' + excerpt;
            // open draft PR with diff excerpt
            await github.pulls.create({ owner, repo, title: 'chore: sync SHORT_PROMPT.md to match SSOT', head: branch, base: base, body: prBody, draft: true });
